version: 2.1

workflows:
  version: 2
  test:
    jobs:
      - build-all
      - test-netcore-linux:
          name: .NET Core 3.1 - Linux
          docker-image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
          build-target-framework: netcoreapp3.1
          test-target-framework: netcoreapp3.1
          requires:
            - build-all
      - test-netcore-linux:
          name: .NET 6.0 - Linux
          docker-image: mcr.microsoft.com/dotnet/sdk:6.0-focal
          build-target-framework: net6.0
          test-target-framework: net6.0
          requires:
            - build-all
      - test-windows:
          name: .NET Core 3.1 - Windows
          build-target-framework: netcoreapp3.1
          test-target-framework: netcoreapp3.1
          requires:
            - build-all
      - test-windows:
          name: .NET Framework 4.6.2 - Windows
          build-target-framework: net462
          test-target-framework: net462
          requires:
            - build-all
      - test-windows:
          name: .NET Framework 4.7.1 - Windows
          build-target-framework: net462
          test-target-framework: net471
          requires:
            - build-all

orbs:
  win: circleci/windows@2.4.0

jobs:
  build-all:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0-focal
    environment:
      ASPNETCORE_SUPPRESSSTATUSMESSAGES: true
    steps:
      - checkout
      - restore_cache:
          keys: 
            - deps-sdk-{{ checksum "src/LaunchDarkly.ServerSdk/LaunchDarkly.ServerSdk.csproj" }}
            # For these two-step builds, we're caching the NuGet dependencies twice:
            # 1. Here, where we're only building the SDK itself and not the test project, we cache the
            # packages with a key like "deps-sdk-xxxx" where "xxxx" only changes if the SDK project
            # file changes.
            # 2. In the test-netcore job, we are loading dependencies for the test project which might
            # vary depending on which framework we're building the test project with. So we cache the
            # dependencies there with a key like "deps-netcoreapp3.1-xxxx-yyyy" where the "yyyy" part
            # will change if the project file for the test project changes.
      - run:
          name: restore dependencies
          command: dotnet restore src/LaunchDarkly.ServerSdk
      - save_cache:
          key: deps-sdk-{{ checksum "src/LaunchDarkly.ServerSdk/LaunchDarkly.ServerSdk.csproj" }}
          paths:
            - /root/.nuget/packages
      - run:
          name: build
          command: dotnet build src/LaunchDarkly.ServerSdk
      - persist_to_workspace:
          root: src/LaunchDarkly.ServerSdk
          paths:
            - bin
            - obj

  test-netcore-linux:
    parameters:
      docker-image:
        type: string
      build-target-framework:
        type: string
      test-target-framework:
        type: string
    docker:
      - image: <<parameters.docker-image>>
    environment:
      ASPNETCORE_SUPPRESSSTATUSMESSAGES: true
      BUILDFRAMEWORKS: <<parameters.build-target-framework>>
      TESTFRAMEWORK: <<parameters.test-target-framework>>
      TEST_HARNESS_PARAMS: -junit /tmp/circle-reports/contract-tests-junit.xml
    steps:
      - run:
          name: install packages
          command: apt -q update && apt install -y make
      - checkout
      - attach_workspace:
          at: src/LaunchDarkly.ServerSdk
      - restore_cache:
          keys: 
            - deps-<<parameters.test-target-framework>>-{{ checksum "src/LaunchDarkly.ServerSdk/LaunchDarkly.ServerSdk.csproj" }}-{{ checksum "test/LaunchDarkly.ServerSdk.Tests/LaunchDarkly.ServerSdk.Tests.csproj" }}
      - run:
          name: restore LaunchDarkly.ServerSdk.Tests
          command: dotnet restore test/LaunchDarkly.ServerSdk.Tests
      - save_cache:
          key: deps--<<parameters.test-target-framework>>-{{ checksum "src/LaunchDarkly.ServerSdk/LaunchDarkly.ServerSdk.csproj" }}-{{ checksum "test/LaunchDarkly.ServerSdk.Tests/LaunchDarkly.ServerSdk.Tests.csproj" }}
          paths:
            - /root/.nuget/packages
      - run: mkdir -p /tmp/circle-reports
      - run:
          name: run tests
          command: dotnet test test/LaunchDarkly.ServerSdk.Tests/LaunchDarkly.ServerSdk.Tests.csproj

      - run: make build-contract-tests
      - run:
          command: make start-contract-test-service
          background: true
      - run: make run-contract-tests

      - store_test_results:
          path: /tmp/circle-reports

  test-windows:
    parameters:
      build-target-framework:
        type: string
      test-target-framework:
        type: string
    executor:
      name: win/default
      shell: powershell.exe
    environment:
      BUILDFRAMEWORKS: <<parameters.build-target-framework>>
      TESTFRAMEWORK: <<parameters.test-target-framework>>

    steps:
      - checkout
      - attach_workspace:
          at: src/LaunchDarkly.ServerSdk
      - restore_cache:
          keys: 
            - deps-<<parameters.test-target-framework>>-{{ checksum "src/LaunchDarkly.ServerSdk/LaunchDarkly.ServerSdk.csproj" }}-{{ checksum "test/LaunchDarkly.ServerSdk.Tests/LaunchDarkly.ServerSdk.Tests.csproj" }}
      - run:
          name: install project dependencies
          command: dotnet restore test/LaunchDarkly.ServerSdk.Tests
      - save_cache:
          key: deps-<<parameters.test-target-framework>>-{{ checksum "src/LaunchDarkly.ServerSdk/LaunchDarkly.ServerSdk.csproj" }}-{{ checksum "test/LaunchDarkly.ServerSdk.Tests/LaunchDarkly.ServerSdk.Tests.csproj" }}
          paths:
            - C:\Users\circleci\.nuget\packages
      - run: New-Item -Path "circle-reports" -ItemType "directory"
      - run:
          name: run tests
          command: dotnet test test/LaunchDarkly.ServerSdk.Tests/LaunchDarkly.ServerSdk.Tests.csproj

      # sdk-test-harness is not yet running well in Windows, but these would be the steps:
      # - run:
      #     name: build contract tests
      #     command: |
      #       cd contract-tests
      #       dotnet build TestService.csproj
      # - run:
      #     name: start contract test service
      #     command: |
      #       cd contract-tests
      #       dotnet bin/Debug/$env:TESTFRAMEWORK/ContractTestService.dll
      #     background: true
      # - run:
      #     name: run contract tests
      #     command: |
      #       Invoke-WebRequest -Uri `
      #         https://github.com/launchdarkly/sdk-test-harness/releases/download/v1.1.2/sdk-test-harness_Windows_x86_64.zip `
      #         -OutFile sdk-test-harness.zip
      #       Expand-Archive -Path sdk-test-harness.zip 
      #       .\sdk-test-harness\sdk-test-harness.exe -url http://localhost:8000 `
      #         -debug -stop-service-at-end -junit ./circle-reports/contract-tests-junit.xml

      - store_test_results:
          path: circle-reports